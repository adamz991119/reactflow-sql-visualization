#!/usr/bin/env node

const fs = require("fs").promises;

const SCHEMA_FILE = "schema.csv";
const SCHEMA_COLORS_FILE = "src/config/schemaColors.json";
const SCHEMA_COLORS_TEMPLATE_FILE = "src/config/schemaColors.json.template";
const TABLE_POSITIONS_FILE = "src/config/tablePositions.json";

const DATA_TYPES = {
  "character varying": "text",
  "timestamp without time zone": "timestamp"
}

const adjustDataTypeName = (rawName) => {
  if(DATA_TYPES[rawName]) {
    return DATA_TYPES[rawName];
  } else {
    return rawName;
  }
};

const readTableData = async () => {
  const schema = await fs.readFile(SCHEMA_FILE, "utf8");

  const schemaData = schema.replaceAll('"', '').trim().split("\n").map(row => row.split(","));
  const [headers] = schemaData.splice(0, 1);

  const data = schemaData.map(row => {
    return Object.fromEntries(headers.map((key, index) => [key, row[index]]));
  });

  data.map(o => o.data_type = adjustDataTypeName(o.data_type));

  return data;
};

const importSchemaColors = async (schemas) => {
  const schemasTemplateFile = await fs.readFile(SCHEMA_COLORS_TEMPLATE_FILE, "utf8");
  const defaultSchemaColors = JSON.parse(schemasTemplateFile);
  let schemaColors = Object.keys(schemas).reduce((acc, schemaName) => {
    acc[schemaName] = defaultSchemaColors.DEFAULT;
    return acc;
  }, {});

  schemaColors = {
    ...defaultSchemaColors,
    ...schemaColors
  };

  await fs.writeFile(SCHEMA_COLORS_FILE, JSON.stringify(schemaColors, null, 2), "utf8");
};

const importTablePositions = async (tables) => {
  const tablePositions = Object.keys(tables).reduce((acc, tableName) => {
    const fullTableName = tableName.includes(".") ? tableName : `public.${tableName}`;

    acc[fullTableName] = {
      x: 0,
      y: 0
    };
    return acc;
  }, {});

  await fs.writeFile(TABLE_POSITIONS_FILE, JSON.stringify(tablePositions, null, 2), "utf8");
}

const importTableConfigs = async (tables) => {
  Object.keys(tables).forEach(async tableName => {
    const tableFile = `src/config/tables/${tableName}.json`;
    const tableConfig = {
      name: tableName,
      description: "",
      columns: []
    };

    tables[tableName].forEach(row => {
      const columnName = row[0];
      const columnType = row[1];

      tableConfig.columns.push({
        name: columnName,
        description: "",
        type: columnType
      });
    });

    await fs.writeFile(tableFile, JSON.stringify(tableConfig, null, 2), "utf8");
  });
};

const importConfigFiles = async () => {
  const tableData = await readTableData();
  const tables = {};
  const schemas = {};

  tableData.forEach(row => {
    schemas[row.table_schema] = true;

    const name = row.table_schema === "public" ? row.table_name : `${row.table_schema}.${row.table_name}`;

    if(tables[name]) {
      tables[name].push([row.column_name, row.data_type]);
    } else {
      tables[name] = [];
    }
  });

  await importSchemaColors(schemas);
  await importTablePositions(tables);
  await importTableConfigs(tables);
};

const readline = require("readline").createInterface({
  input: process.stdin,
  output: process.stdout
});

readline.question("Do you want to import schema from a CSV file? y/n\n", async (answer) => {
  if(answer.toLowerCase().includes("y")) {
    await importConfigFiles();

    console.log("Roger, everything is imported.");
  } else {
    console.log("Roger, skipping importing.");
  }

  readline.close();
});
